{"version":3,"file":"functional-react-hooks.cjs.production.min.js","sources":["../src/hooks/useAsync.ts","../src/utils/isBrowser.ts","../src/utils/sessionStorage.ts","../src/utils/localStorage.ts","../src/hooks/useBool.ts","../src/hooks/useEventListener.ts","../src/hooks/useIsDomReady.ts","../src/hooks/useViewportSize.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport {\r\n  UseAsyncStatus,\r\n  UseAsyncExecuteFunction,\r\n  UseAsyncOptions,\r\n  UseAsyncAsyncFunction,\r\n  UseAsyncReturn,\r\n} from '../types';\r\n\r\nexport default (\r\n  asyncFunction: UseAsyncAsyncFunction,\r\n  options: UseAsyncOptions = { immediate: true }\r\n): UseAsyncReturn => {\r\n  const [response, setResponse] = useState(null);\r\n  const [status, setStatus] = useState<UseAsyncStatus>('Idle');\r\n  const [error, setError] = useState<unknown>(null);\r\n\r\n  // * function to execute asyncFunction\r\n  const executeAsync = useCallback(\r\n    async (args?: UseAsyncExecuteFunction) => {\r\n      // * Before calling asyncFunction set status to pending\r\n      setStatus('Pending');\r\n      setResponse(null);\r\n      setError(null);\r\n\r\n      try {\r\n        const resault = await asyncFunction(args?.variables);\r\n\r\n        setStatus('Success');\r\n        setResponse(resault);\r\n        setError(null);\r\n\r\n        if (args?.onSuccess) args.onSuccess(resault, status);\r\n      } catch (error) {\r\n        setStatus('Error');\r\n        setError(error);\r\n        setResponse(null);\r\n\r\n        if (args?.onError) args.onError(error, status);\r\n      }\r\n    },\r\n    [asyncFunction, status]\r\n  );\r\n\r\n  // * by default execute `executeAsync` function on component mount\r\n  useEffect(() => {\r\n    if (options.immediate) {\r\n      executeAsync({\r\n        onError: options?.onError,\r\n        onSuccess: options?.onSuccess,\r\n        variables: options?.variables,\r\n      });\r\n    }\r\n  }, [options, executeAsync]);\r\n\r\n  return [executeAsync, { response, status, error }];\r\n};\r\n","const isBrowser = typeof window !== 'undefined';\r\nexport default isBrowser;\r\n","import isBrowser from './isBrowser';\r\n\r\nconst setSessionStorage = <Value>(key: string, value: Value) => {\r\n  if (isBrowser) return sessionStorage.setItem(key, JSON.stringify(value));\r\n  return;\r\n};\r\n\r\nconst getSessionStorage = (key: string) => {\r\n  if (isBrowser) {\r\n    const storageValue = sessionStorage.getItem(key);\r\n    // * if type of value from session storage is string parse it then return\r\n    // * else return original value\r\n    if (typeof storageValue === 'string') return JSON.parse(storageValue);\r\n    return storageValue;\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nconst removeSessionStorage = (key: string) => {\r\n  if (isBrowser) return sessionStorage.removeItem(key);\r\n  return;\r\n};\r\n\r\nexport default { setSessionStorage, getSessionStorage, removeSessionStorage };\r\n","import isBrowser from './isBrowser';\r\n\r\nconst setLocalStorage = <Value>(key: string, value: Value) => {\r\n  if (isBrowser) return localStorage.setItem(key, JSON.stringify(value));\r\n  return;\r\n};\r\n\r\nconst getLocalStorage = (key: string) => {\r\n  if (isBrowser) {\r\n    const storageValue = localStorage.getItem(key);\r\n    // * if type of value from local storage is string parse it then return\r\n    // * else return original value\r\n    if (typeof storageValue === 'string') return JSON.parse(storageValue);\r\n    return storageValue;\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nconst removeLocalStorage = (key: string) => {\r\n  if (isBrowser) return localStorage.removeItem(key);\r\n  return;\r\n};\r\n\r\nexport default { setLocalStorage, getLocalStorage, removeLocalStorage };\r\n","import { useState } from 'react';\r\n\r\nexport default (initialState = false) => {\r\n  const [bool, setBool] = useState<boolean>(initialState);\r\n\r\n  // * toggle bool\r\n  const toggleBool = () => setBool(prevBool => !prevBool);\r\n\r\n  // * set bool true\r\n  const setBoolTrue = () => setBool(true);\r\n\r\n  // * set bool false\r\n  const setBoolFalse = () => setBool(false);\r\n\r\n  return { bool, setBool, toggleBool, setBoolTrue, setBoolFalse };\r\n};\r\n","import { useRef, useEffect } from 'react';\r\nimport { UseEventListenerOptions } from '../types';\r\n\r\nexport default (options: UseEventListenerOptions) => {\r\n  const { eventName, handler, element = window } = options;\r\n\r\n  // * Create a ref that stores handler\r\n  const savedHandler = useRef(handler);\r\n\r\n  // * Update ref.current value if handler changes.\r\n  // ? This allows our effect below to always get latest handler\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    // * Make sure element supports addEventListener\r\n    const isSupported = element && element.addEventListener;\r\n    if (!isSupported) return;\r\n\r\n    // * Create event listener that calls handler function stored in ref\r\n    const eventListener = (event: Event): void => savedHandler.current(event);\r\n\r\n    // * Add event listener\r\n    element.addEventListener(eventName, eventListener);\r\n\r\n    // * Remove event listener on cleanup\r\n    return () => {\r\n      element.removeEventListener(eventName, eventListener);\r\n    };\r\n\r\n    // * Re-run if eventName or element changes\r\n  }, [eventName, element]);\r\n\r\n  return null;\r\n};\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport default () => {\r\n  const [isDomReady, setIsDomReady] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setIsDomReady(true);\r\n    return () => setIsDomReady(false);\r\n  }, []);\r\n\r\n  return isDomReady;\r\n};\r\n","import { useState, useCallback, useEffect } from 'react';\r\n\r\nimport { UseViewportSize } from '../types';\r\n\r\nexport default () => {\r\n  // * set undefined values to match values in server and client\r\n  const [viewportSize, setViewportSize] = useState<UseViewportSize>({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  // * a handler func for setting window inner sizes\r\n  const setSizeHandler = useCallback(() => {\r\n    return setViewportSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', setSizeHandler, { passive: true });\r\n    window.addEventListener('orientationchange', setSizeHandler, {\r\n      passive: true,\r\n    });\r\n\r\n    // ? Call handler right away so state gets updated with initial window size\r\n    setSizeHandler();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', setSizeHandler);\r\n      window.removeEventListener('orientationchange', setSizeHandler);\r\n    };\r\n  }, [setSizeHandler]);\r\n\r\n  return viewportSize;\r\n};\r\n"],"names":["isBrowser","window","setSessionStorage","key","value","sessionStorage","setItem","JSON","stringify","getSessionStorage","storageValue","getItem","parse","removeSessionStorage","removeItem","setLocalStorage","localStorage","getLocalStorage","removeLocalStorage","asyncFunction","options","immediate","useState","response","setResponse","status","setStatus","error","setError","executeAsync","useCallback","args","_context","variables","resault","onSuccess","onError","useEffect","_options","_options2","_options3","initialState","setBool","bool","toggleBool","prevBool","setBoolTrue","setBoolFalse","eventName","handler","_options$element","element","savedHandler","useRef","current","addEventListener","eventListener","event","removeEventListener","isDomReady","setIsDomReady","width","undefined","height","viewportSize","setViewportSize","setSizeHandler","innerWidth","innerHeight","passive"],"mappings":"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"}